//Description:
///Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.
//The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. 
//Please note that your returned answers (both index1 and index2) are not zero-based.
//You may assume that each input would have exactly one solution and you may not use the same element twice.
//-------------------------------------------
//Solution:
public class Solution{
	public int[] twoSum(int[] numbers,int target){
		//思路1：笨办法~两遍遍历寻找和为目标值的两个数
		int index1 = 0,index2 = 0;
		for(int i = 0; i < numbers.length; i++){
			index1 = i;
			int another = target - numbers[i];
			for(int j = i + 1; j < numbers.length; j++){
				if(numbers[j] == another){
					index2 = j;
					return new int[]{index1+1,index2+1};
				}
			}
		}
		return new int[] {};
		//思路2：与two_sum一样，使用hashmap来存储键值，key是数组中的值，value是索引，一遍遍历即可。
		Map<Integer, Integer> map = new HashMap<>();
		for (int i = 0; i < numbers.length; i++) {
			int complement = target - numbers[i];
			if (map.containsKey(complement)) {
				return new int[] { map.get(complement), i+1};
			}
			map.put(numbers[i], i+1);
		}
		throw new IllegalArgumentException("No two sum solution");
		//思路3：
		//使用两根指针，一个在最左边，一个在最右边。将两个指针所指的数相加。
		//如果和大于目标值，则右指针向左移动;如果和小于目标值，则左指针向右移动。
		int[] result = new int[2];
		if(numbers == null || numbers.length < 2){
			return result;
		}
		int left = 0,right = numbers.length - 1;
		while(left < right){
			int sum = numbers[left] + numbers[right];
			if(sum == target){
				result[0] = left + 1;
				result[1] = right + 1;
				break;
			}else if(sum > target){
				right--;
			}else{
				left++;
			}
		}
		return result;
	}
}