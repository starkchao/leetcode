//Description:
//Rotate an array of n elements to the right by k steps.
//For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].
//-------------------------------------------
//Solution:
public class Solution{
	public void rotate(int[] nums, int k) {
		//思路1：每次拿到一个数字，逐个移位，交换。会超时= =
        if(k % nums.length == 0){
			return;
		}
		k = k % nums.length;
		int temp,previous;
		for(int i = 0;i < k;i++){
			previous = nums[nums.length - 1];
			for(int j = 0; j < nums.length;j++){
				temp = nums[j];
				nums[j] = previous;
				previous = temp;
			}
		}
		//思路2：利用额外的数组，将数字放到对应的位置上，然后将额外数组的值赋给原数组
		if(k % nums.length == 0){
			return;
		}
		k = k % nums.length;
		int[] temp = new int[nums.length];
		for(int i = 0;i < nums.length;i++){
			temp[(i + k) % nums.length] = nums[i];
		}
		for(int i = 0;i < nums.length;i++){
			nums[i] = temp[i];
		}
		//思路3：In this approach, we firstly reverse all the elements of the array. Then, reversing the first k elements //followed by reversing the rest n-k elements gives us the required result.
		if(k % nums.length == 0){
			return;
		}
		k = k % nums.length;
		reverse(nums,0,nums.length - 1);
		reverse(nums,0,k - 1);
		reverse(nums,k,nums.length - 1);
    }
	public void reverse(int[] nums,int start,int end){
		while(start < end){
			int temp = nums[start];
			nums[start] = nums[end];
			nums[end] = temp;
			start++;
			end--;
		}
	}
}